"""Subclass of dialog_base, which is generated by wxFormBuilder."""
import os
import re
import copy

import wx

from . import dialog_base

class Dialog(dialog_base.KiBuzzardDialog):
    def __init__(self, parent, config, buzzard, func):
        dialog_base.KiBuzzardDialog.__init__(self, parent)
        
        best_size = self.BestSize
        # hack for some gtk themes that incorrectly calculate best size
        best_size.IncBy(dx=0, dy=30)
        self.SetClientSize(best_size)
        self.config = config
        self.func = func
        
        self.loadConfig()

        self.buzzard = buzzard
        self.polys = []
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        
    def loadConfig(self):
        self.config.SetPath('/')
        
    def saveConfig(self):
        self.config.SetPath('/')
        

    def labelEditOnTextEnter( self, event ):
        self.createButtonOnButtonClick(event)
        
    def labelEditOnText( self, event ):
        self.polys = []
        
        try:
            self.polys = self.buzzard.generate(self.labelEdit.GetValue())

        except Exception as e:
            print(e)
            # Todo display error messages

        self.Layout()
        self.Refresh()
        self.Update()

    def OnPaint(self, e):

        dc = wx.PaintDC(self)
        dc.SetPen(wx.Pen('#000000', width=1))

        size_x, size_y = self.m_panel3.GetSize()
        position_x, position_y = self.m_panel3.GetPosition()


        dc.SetDeviceOrigin(int(position_x + size_x/2), int((position_y + size_y)/2))

        dc.SetBrush(wx.Brush('#000000'))


        if len(self.polys):

            min_x = 0
            max_x = 0

            for i in range(len(self.polys)):
                for j in range(len(self.polys[i])):
                    min_x = min(self.polys[i][j][0], min_x)
                    max_x = max(self.polys[i][j][0], max_x)


            size_x, _ = self.m_panel3.GetSize()

            scale = (size_x * 0.95) / (max_x - min_x)
            

            # Create copy of poly list for scaling preview
            polys = copy.deepcopy(self.polys)

            # Scale
            scale = min(50.0, scale)


            #print(min_x, max_x)
            #print(max_x - min_x)
            #print('scale:', scale)
            
            
            for i in range(len(polys)):
                for j in range(len(polys[i])):
                    polys[i][j] = (scale*polys[i][j][0],scale*polys[i][j][1])



            dc.DrawPolygonList(polys)
        